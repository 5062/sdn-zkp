import random

from sympy import isprime

# random secret
X = {
    128: 319360769547661552975876934475756407210,
    256: 35554806492577807849847963582582352397718351462829377300813225729252377657454,
    512: 12316888904475746790281591220502706520588356678821637542451350271442376857735093966967770086826477103881642552596052132630293015247093391795101292610450130,
    1024: 61964161252406530934520081927770124681000168287306801464441985231165155798422424692191764019460890839358033108766312356527219779550683228798411103175256243496951742291005812517507724709642742892661173665610492182142308532604633576316014061960974488872916831889096500109417452458267330188399012453578366817184
}

# safe prime
P = {
    128: 332433209405528502842374495798605222863,
    256: 98319072350958552656099198904742220220399406765940451311887912901303856457919,
    512: 10897074200418588277398049368338603800322513567930537555849458531598367228687716328009009269587792997797777398011536327206160966062661160674480853727897407,
    1024: 155782222441444698539900950195832776300882672320930310910426556151482300117555253717477839319491066539027663041541693929666974325623695637772540200940565248304926872369373411341418736654376865279674792898364265350635881267014859957729594726982055314267937329065437786581984746165230491585440476005598438520563
}
G = 2

N = 10

A = [1, 0, 0, 1, 1, 1, 1, 0, 1, 0]


def rand_prime(nbits: int):
    while True:
        # Generate a random n-bit number
        num = random.getrandbits(nbits)

        # Set the most significant bit and the least significant bit to ensure n bits
        num |= (1 << (nbits - 1)) | 1

        # Check if the number is prime
        if isprime(num):
            return num


def rand_safe_prime(nbits: int):
    while True:
        # Generate a random n-bit number
        num = random.getrandbits(nbits)

        # Set the most significant bit and the least significant bit to ensure n bits
        num |= (1 << (nbits - 1)) | 1

        # Check if the number is prime and its (p - 1) // 2 is prime (safe prime condition)
        if isprime(num) and isprime((num - 1) // 2):
            return num


def primitive_root(p):
    # Find a generator g for the prime number p
    for g in range(2, p):
        if pow(g, (p - 1) // 2, p) != 1 and pow(g, p - 1, p) == 1:
            return g


def rand_binaries(n: int):
    # return a list of n random binary numbers
    return [random.getrandbits(1) for _ in range(n)]
